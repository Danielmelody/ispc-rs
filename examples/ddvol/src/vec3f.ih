#ifndef VEC3F_ISPC_H
#define VEC3F_ISPC_H

// 1.0 / pi
#define M_1_PI 0.31830988618379067154
// pi / 4.0
#define M_PI_4 0.78539816339744830961

struct Vec3f {
	float x, y, z;
};
inline Vec3f make_vec3f(float x, float y, float z){
	Vec3f v;
	v.x = x;
	v.y = y;
	v.z = z;
	return v;
}
inline uniform Vec3f make_vec3f(uniform float x, uniform float y, uniform float z){
	uniform Vec3f v;
	v.x = x;
	v.y = y;
	v.z = z;
	return v;
}
inline float<3> to_short_vec(Vec3f v) {
	float<3> a = {v.x, v.y, v.z};
	return a;
}
inline uniform float<3> to_short_vec(uniform Vec3f v) {
	uniform float<3> a = {v.x, v.y, v.z};
	return a;
}
inline uniform float dot(uniform float<3> a, uniform float<3> b){
	return a.x * b.x + a.y * b.y + a.z * b.z;
}
inline uniform float length(uniform float<3> a){
	return sqrt(dot(a, a));
}
inline uniform float<3> cross(uniform float<3> a, uniform float<3> b){
	uniform float<3> c;
	c.x = a.y * b.z - a.z * b.y;
	c.y = a.z * b.x - a.x * b.z;
	c.z = a.x * b.y - a.y * b.x;
	return c;
}
inline uniform float<3> normalize(uniform float<3> a){
	uniform float inv_len = rsqrt(dot(a, a));
	return a * inv_len;
}
inline float dot(float<3> a, float<3> b){
	return a.x * b.x + a.y * b.y + a.z * b.z;
}
inline float length(float<3> a){
	return sqrt(dot(a, a));
}
inline float<3> cross(float<3> a, float<3> b){
	float<3> c;
	c.x = a.y * b.z - a.z * b.y;
	c.y = a.z * b.x - a.x * b.z;
	c.z = a.x * b.y - a.y * b.x;
	return c;
}
inline float<3> normalize(float<3> a){
	float inv_len = rsqrt(dot(a, a));
	return a * inv_len;
}
inline void ortho_basis(float<3> basis[3], const float<3> n){
	basis[2] = n;
	basis[1].x = 0.f;
	basis[1].y = 0.f;
	basis[1].z = 0.f;

	if (n.x < 0.6f && n.x > -0.6f){
		basis[1].x = 1.f;
	} else if (n.y < 0.6f && n.y > -0.6f){
		basis[1].y = 1.f;
	} else if (n.z < 0.6f && n.z > -0.6f){
		basis[1].z = 1.f;
	} else {
		basis[1].x = 1.f;
	}
	basis[0] = normalize(cross(basis[1], basis[2]));
	basis[1] = normalize(cross(basis[2], basis[0]));
}

struct Ray {
	float<3> origin, dir;
};

struct Isect {
	float t;
	float<3> p, n;
	int hit;
};

#endif


