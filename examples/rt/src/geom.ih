#ifndef GEOM_ISPC_H
#define GEOM_ISPC_H

#include "vec3f.ih"
#include "material.ih"

enum GEOM_TYPE {
	SPHERE,
	PLANE
};

struct Geometry {
	GEOM_TYPE type;
	const Material *material;
};

struct Sphere {
	Geometry geom;
	Vec3f center;
	float radius;
};

// An infinite plane centered at some point
struct Plane {
	Geometry geom;
	Vec3f center;
	Vec3f normal;
};

// Allocate and construct a new ISPC-side sphere, the pointer passed will be set to point to
// the newly allocated sphere
export void make_sphere(uniform const Geometry * uniform * uniform out, uniform const Vec3f * uniform center,
		uniform float radius, uniform const Material * uniform mat);
// Release the ISPC-side sphere
export void drop_sphere(const uniform Geometry * uniform geom);
bool sphere_intersect(Isect &isect, const Ray &ray, const uniform Geometry * uniform geom);

// Allocate and construct a new ISPC-side plane, the pointer passed will be set to point to
// the newly allocated sphere
export void make_plane(uniform const Geometry * uniform * uniform out, uniform const Vec3f * uniform center,
		uniform const Vec3f * uniform normal, uniform const Material * uniform mat);
// Release the ISPC-side sphere
export void drop_plane(const uniform Geometry * uniform geom);
bool plane_intersect(Isect &isect, const Ray &ray, const uniform Geometry * uniform geom);

#endif

